// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1388.frc2019official.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1388.frc2019official.Robot;
import org.usfirst.frc1388.frc2019official.UsbLogging;

public class PancakeMake extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

    private boolean dPadUp;
    private boolean dPadDown;

    public PancakeMake() {

        boolean dPadUp = false;
        boolean dPadDown = false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.pancakeMaker);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        int Up = 0;
        int Down = 180;
        boolean drDPadUp = Robot.oi.getDriveController().getPOV(0) == Up;
        boolean opDPadUp = Robot.oi.getOpController().getPOV(0) == Up;
        boolean drDPadDown = Robot.oi.getDriveController().getPOV(0) == Down;
        boolean opDPadDown = Robot.oi.getOpController().getPOV(0) == Down;

        dPadUp = ( drDPadUp || opDPadUp );
        dPadDown = ( drDPadDown || opDPadDown );


        if ( dPadUp && !dPadDown ) { // move pancake arm up
            Robot.pancakeMaker.pancakeUp();
            UsbLogging.debug("pancake arm up");
        }

        if( dPadDown && !dPadUp ) { // move pancake arm down
            Robot.pancakeMaker.pancakeDown();
            UsbLogging.debug("pancake arm down");
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
