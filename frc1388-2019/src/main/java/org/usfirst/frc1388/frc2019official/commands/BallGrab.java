// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1388.frc2019official.commands;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1388.frc2019official.Robot;

/**
 *
 */
public class BallGrab extends Command {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

    private boolean ejectorEnabled = false;

    public BallGrab() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.ballGrabber); 

        ejectorEnabled = false;     
    }

    public void ballGrab( DoubleSolenoid controlSolenoid ){        
        controlSolenoid.set(DoubleSolenoid.Value.kForward ); // pushes the actuator on the effector forward to allow for grabbing
        // get a signal and or after a delay
        controlSolenoid.set(DoubleSolenoid.Value.kReverse ); // contract the jaws to hold the ball
    }
    public void ballRelease( DoubleSolenoid controlSolenoid ){        
        controlSolenoid.set( DoubleSolenoid.Value.kForward );
    }
    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {

        // Right trigger (both controllers) used to grab
        double drRightTrigger = Robot.oi.getDriveController().getTriggerAxis(Hand.kRight);
        double opRightTrigger = Robot.oi.getOpController().getTriggerAxis(Hand.kRight);

        //get right trigger
        if(drRightTrigger>0 || drRightTrigger>0) {
            Robot.ballGrabber.grab();
        }

        // Left trigger (both controllers) used to release and eject ball
		double drLeftTrigger = Robot.oi.getDriveController().getTriggerAxis(Hand.kLeft);
		double opLeftTrigger = Robot.oi.getOpController().getTriggerAxis(Hand.kLeft);
        if(drLeftTrigger>0 || opLeftTrigger>0) {
            Robot.ballGrabber.release();
            // TODO: do we need a delay here?
            Robot.ballGrabber.eject();
            // set timer for 2 seconds. TODO: define the value of 2 above as a constant rather than this magic number
            setTimeout(2);
            // set an ejector enabled flag
            ejectorEnabled = true;
        }

        // retract the ejector when the ejector is enabled and the timeout expires
        if(ejectorEnabled && isTimedOut()) {
            // retract the ejector
            Robot.ballGrabber.retract();
            // reset the ejector enabled flag
            ejectorEnabled = false;
        }
}

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
